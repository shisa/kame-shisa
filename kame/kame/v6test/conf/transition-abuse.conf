#	$KAME: transition-abuse.conf,v 1.22 2001/07/12 13:04:57 itojun Exp $

# for more details/discussions, see
# http://playground.iijlab.net/i-d/draft-itojun-ipv6-transition-abuse-01.txt

# abuse of IPv4 mapped address.  under the following conditions:
# - the victim kernel stack does not check against IPv4 mapped address on
#   IPv6 native packet (if you have RFC2765 support in kernel, you can't filter
#   them out).
# - the victim node runs udp echo service (inetd) on AF_INET6 socket
# the victim node can generate IPv4 broadcast responses mistakenly,
# leading to DoS.
#
# the example also tries to bypass access controls and attack inside the
# firewall from outside (works nicer when 9.0.0.1 is an IPv4 firewall).
#
# you can attack any udp services in the same way.  udp echo service works the
# best for bad guys (or the worst for victims) since udp packet format is
# common to IPv4 and IPv6, and echo service is common for IPv4 and IPv6.
# therefore, the broadcast response will call for more responses (assumption:
# inetd does not check udp source port).
#	attacker -> victim: from ::ffff:10.255.255.255 to ::ffff:9.0.0.1
#	victim -> broadcast: from 9.0.0.1 to 10.255.255.255
#	more response: from many guys to 9.0.0.1
#
# RFC2553 does NOT comment on this case.  also, if the victim node supports
# SIIT (RFC2765) environment, the kernel stack is unable to filter out
# the packet.
#
# to protect your implmentation from the attack, there are multiple ways.
# 1. do not support IPv4 mapped address on AF_INET6 API (not compatible with
#    RFC2553 section 3.7).
# 2. implement 2553bis-03 IPV6_V6ONLY socket option, and make the default value
#    to on (the default value suggested by the document is "off").
#    this has almost the same effect as the first bullet (if userland
#    code changes IPV6_V6ONLY manually, you will become vulnerable again
#    depending on userland program).  however, with the approach you have to
#    have complex in-kernel interaction between AF_INET and AF_INET6 socket,
#    which can lead to security-senstive kernel bugs.  also, once a userland
#    application turns the socket option off, your system will become
#    vulnerable.  the change will make your stack incompatible with 2553bis-03
#    section 3.7 and 5.3.
# 3. drop any IPv6 native packet with IPv4 mapped address (incompatible with
#    RFC2765).
# 4. on EVERY userland application check the IPv6 source address, if it
#    embeds bad IPv4 address (impossible in reality, as it's hard to know what
#    is "bad" address, and there are millions of coders in different places)
# 5. implement server applications by using AF_INET and AF_INET6 listening
#    socket.  do not try to utilize RFC2553 section 3.7.  if you use
#    getaddrinfo(3) with AI_PASSIVE flag, you can implement address-family
#    independent applications easily.
#    depending on bind(2) semantics implemented in the kernel, this may not be
#    possible.  some IPv6 stack does not permit bind(2) to ::, after bind(2)
#    to 0.0.0.0.
# for the best protection the author recommends to implement (1), (3) and (5).
#
# of course, KAME is not affected.  the implementation status differs
# between *BSD base systems (due to policy differences in *BSD).
# - KAME/OpenBSD: (1) and (3) - always safe
# - KAME/NetBSD: (2) and (3) - safe as long as userland programmer does
#	not change IPV6_V6ONLY.  kernel code is much more complex than
#	KAME/OpenBSD, hence more likelyhood of bugs.
# - KAME/FreeBSD and KAME/BSDI: (3) - subject to API complications
# all KAME userland appliations are implemented by using
# getaddrinfo(AI_PASSIVE), like (5).

# 00:28:37.148869 ::ffff:10.255.255.255.7 > ::ffff:9.0.0.1.7:  [udp sum ok] udp 0 (len 8, hlim 255)
# 			 6000 0000 0008 11ff 0000 0000 0000 0000
# 			 0000 ffff 0aff ffff 0000 0000 0000 0000
# 			 0000 ffff 0900 0001 0007 0007 0008 ebd0

v4mapped1:\
	:ip6-v4mapped1:udp1:
ip6-v4mapped1:\
        :ip6_flow#0:ip6_plen=auto:ip6_nxt=auto:ip6_hlim#255:\
        :ip6_src="::ffff:10.255.255.255":\
	:ip6_dst="::ffff:9.0.0.1":
udp1:\
	:udp_sport#7:udp_dport#7:

# one more abuse of IPv4 mapped address.
# bad guy pretends that the traffic is from the machine itself.
# if the victim node re-selects source address on the first udp echo response,
# we will see infinite IPv4 echo traffic on loopback interface.
#
# note: most of recent BSD inetd rejects udp echo with source port = 7,
# so they are safe.  however, it is still true that we can bypass access
# control like this.

# 00:28:51.286261 ::ffff:127.0.0.1.7 > ::ffff:9.0.0.1.7:  [udp sum ok] udp 0 (len 8, hlim 255)
# 			 6000 0000 0008 11ff 0000 0000 0000 0000
# 			 0000 ffff 7f00 0001 0000 0000 0000 0000
# 			 0000 ffff 0900 0001 0007 0007 0008 77ce

v4mapped2:\
	:ip6-v4mapped2:udp1:
ip6-v4mapped2:\
        :ip6_flow#0:ip6_plen=auto:ip6_nxt=auto:ip6_hlim#255:\
        :ip6_src="::ffff:127.0.0.1":\
	:ip6_dst="::ffff:9.0.0.1":

# abuse of IPv4 compatible address (auto tunnel).  under the following
# conditions:
# - the victim kernel stack supports auto tunnel
# the victim node will generate IPv4 broadcast responses, leading to DoS.
#
# the example also tries bypass access controls and attack inside the firewall
# from outside (works nicer when 9.0.0.1 is an IPv4 firewall).
#
# with other IPv6 source address, bad guys can attack other IPv4 victim nodes
# anonymously.  however, IPv4 packet will always be tunnelled IPv6 packet
# (ip.ip_p == 41), therefore there will be no further traffic amplicfication.
#
# RFC2893 has a comment for embedded broadcast/multicast case, however,
# the set of rules does not make a perfect protection.
#
# KAME is not affected, since it does not support auto tunnels and it drops
# packets with IPv4 compatible address.

# 00:29:02.702670 ::10.255.255.255 > ::9.0.0.1: icmp6: echo request (len 8, hlim 255)
# 			 6000 0000 0008 3aff 0000 0000 0000 0000
# 			 0000 0000 0aff ffff 0000 0000 0000 0000
# 			 0000 0000 0900 0001 8000 6bbd 0000 0000

v4compat:\
	:ip6-v4compat:icmp6echo:
ip6-v4compat:\
        :ip6_flow#0:ip6_plen=auto:ip6_nxt=auto:ip6_hlim#255:\
        :ip6_src="::10.255.255.255":\
	:ip6_dst="::9.0.0.1":
icmp6echo:\
        :icmp6_type=echo:icmp6_code#0:icmp6_cksum=auto:icmp6_id#0:\
	:icmp6_seq#0:

# abuse of 6to4.  under the following conditions:
# - the victim node is configured as an 6to4 relay
# the victim node will generate IPv4 broadcast responses, leading to DoS.
#
# with other IPv6 source address, bad guys can attack other IPv4 victim nodes
# anonymously.  however, IPv4 packet will always be tunnelled IPv6 packet
# (ip.ip_p == 41), therefore there will be no further traffic amplicfication.
#
# RFC2529 suggests checks against embedded broadcat addresses, but it
# does not work in reality.  for example, 9.0.0.1 has no idea about topology
# within 16.0.0.0/8, and has no idea about IPv4 broadcast address assignments.
# because of this, the following example tries to generate a packet to
# 16.255.255.255 by using 9.0.0.1 (6to4 relay) as trampoline, and hide the
# identity of the real attacker.
# if the admin at 16.0.0.0/8 is careful enough to drop directed broadcasts,
# the scenario does not work.
#
# RFC2529 has a comment for embedded broadcast/multicast case, as well as
# private address cases.  so if an implementation follows the suggestion,
# there is less chance for vulnerability.  but - beware, "less" chance, not
# "no" chance.  you are still vulnerable to some of the scenarios.
#
# KAME is not affected, as long as you don't configure your machine as 6to4
# relay.  if you configure KAME as 6to4 relay, you are vulnerable to some
# of the attack scenarios.

# 00:28:25.121083 2002:10ff:ffff::1 > 2002:900:1::1: icmp6: echo request (len 8, hlim 255)
# 			 6000 0000 0008 3aff 2002 10ff ffff 0000
# 			 0000 0000 0000 0001 2002 0900 0001 0000
# 			 0000 0000 0000 0001 8000 25b8 0000 0000

stf:\
	:ip6-stf:icmp6echo:
ip6-stf:\
        :ip6_flow#0:ip6_plen=auto:ip6_nxt=auto:ip6_hlim#255:\
        :ip6_src="2002:10ff:ffff::1":\
	:ip6_dst="2002:0900:0001::1":

# homework: try using these addresses in extension headers (routing header,
# home address option, whatever) and come up with more complex attack scenarios.
