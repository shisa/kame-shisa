#! /bin/sh

ip6router=NO
ip6mrouter=NO
inet6d_enable=NO
ipv6rtsold=NO
ipv6_mobile_enable=NO
#ipv6_mobile_config_dir="/usr/local/v6/etc/mobileip6"
#ipv6_mobile_nodetype=mobile_node
#ipv6_mobile_home_prefixes="2001:200:0:4819::/64"
#ipv6_mobile_nodetype=home_agent
#ipv6_mobile_home_link="fxp0"
ipv6_ipv4mapping=NO

if [ X"${ip6router}" = X"YES" ]; then
	#
	# manual configurations - in case ip6router=YES
	#
#	route6dflags=
#	mroute6dflags=

	#
	# list of interfaces, and prefix for interfaces
	# NOTE: no trailing double colon necessary here!
	#
	iface="ed0 ep0"
	prefix_ed0="fec0:0000:0000:0001"
	prefix_ep0="fec0:0000:0000:0002"
	
	#
	# list of outer ip addresses for gif.
	#
#	gifs="gif0 gif1"
#	gifconfig_gif0="10.1.1.1 10.1.2.1"
#	gifconfig_gif1="10.1.1.2 10.1.2.2"
else
	#
	# manual configurations - in case ip6router=NO
	# you can configure only single interface, as specification assumes that
	# autoconfigured host has single interface only.
	#
	iface="ed0"
fi

# tool locations
ifconfig=/usr/local/v6/sbin/ifconfig
prefixconfig=/usr/local/v6/sbin/prefix
route6d=/usr/local/v6/sbin/route6d
mroute6d=/usr/local/v6/sbin/pim6dd
rtsol=/usr/local/v6/sbin/rtsol
rtsold=/usr/local/v6/sbin/rtsold
rtadvd=/usr/local/v6/sbin/rtadvd
gifconfig=/usr/local/v6/sbin/gifconfig
route=/usr/local/v6/sbin/route
ndp=/usr/local/v6/sbin/ndp
mip6control=/usr/local/v6/sbin/mip6control
had=/usr/local/v6/sbin/had
setkey=/usr/local/v6/sbin/setkey
if [ -x /usr/local/v6/sbin/sysctl ]; then
	sysctl=/usr/local/v6/sbin/sysctl
else
	sysctl=sysctl
fi

if [ X"${ipv6_ipv4mapping}" = X"YES" ]; then
	$sysctl -w net.inet6.ip6.v6only=0
else
	$sysctl -w net.inet6.ip6.v6only=1
fi

# just to make sure
$ifconfig lo0 up

#determine the "default interface" used below
if [ X"$defaultiface" = X"" ]; then
    for i in $iface; do # use the 1st interface in the list
	defaultiface=$iface
	break
    done
fi
# Disallow link-local unicast packets without outgoing scope identifiers.
# However, if you set "defaultiface", "ndp -I $defaultiface", which will be
# called later in this file for the host case, will allow you to omit
# the identifiers, if you build the kernel with the ENABLE_DEFAULT_SCOPE
# option. Under this configuration, the packets will go to the default
# interface.
#
# If you configure site-locals without scope id (it is permissible config for
# routers that are not on scope boundary), you may want to comment the latter
# one out.
$route add -inet6 fe80:: -prefixlen 10 ::1 -reject
$route add -inet6 fec0:: -prefixlen 10 ::1 -reject
#if [ X"$defaultiface" != X"" ]; then
#    $route add -inet6 fec0:: ::1 -prefixlen 10 -interface -ifp $defaultiface -cloning
#fi

# disallow "internal" addresses to appear on the wire.
$route add -inet6 ::ffff:0.0.0.0 -prefixlen 96 ::1 -reject

# disallow packets to malicious IPv4 compatible prefix.
$route add -inet6 ::224.0.0.0 -prefixlen 100 ::1 -reject
$route add -inet6 ::127.0.0.0 -prefixlen 104 ::1 -reject
$route add -inet6 ::0.0.0.0 -prefixlen 104 ::1 -reject
$route add -inet6 ::255.0.0.0 -prefixlen 104 ::1 -reject

# disallow packets to malicious 6to4 prefix.
$route add -inet6 2002:e000:: -prefixlen 20 ::1 -reject
$route add -inet6 2002:7f00:: -prefixlen 24 ::1 -reject
$route add -inet6 2002:0000:: -prefixlen 24 ::1 -reject
$route add -inet6 2002:ff00:: -prefixlen 24 ::1 -reject

$route add -inet6 2002:0a00:: -prefixlen 24 ::1 -reject
$route add -inet6 2002:ac10:: -prefixlen 28 ::1 -reject
$route add -inet6 2002:c0a8:: -prefixlen 32 ::1 -reject

# Completely disallow packets to IPv4 compatible prefix.
# This may conflict with RFC1933 under following circumstances:
# (1) An IPv6-only KAME node tries to originate packets to IPv4 comatible
#     destination.  The KAME node has no IPv4 compatible support.  Under
#     RFC1933, it should transmit native IPv6 packets toward IPv4 compatible
#     destination, hoping it would reach a router that forwards the packet
#     toward auto-tunnel interface.
# (2) An IPv6-only node originates a packet to IPv4 compatible destination.
#     A KAME node is acting as an IPv6 router, and asked to forward it.
# Due to rare use of IPv4 compatible address, and security issues with it,
# we disable it by default.
$route add -inet6 ::0.0.0.0 -prefixlen 96 ::1 -reject

if [ X"${ip6router}" = X"YES" ]; then
	# act as a router
	$sysctl -w net.inet6.ip6.forwarding=1
	$sysctl -w net.inet6.ip6.accept_rtadv=0

	# wait for DAD
	for i in $iface; do
		$ifconfig $i up
	done
	sleep `$sysctl net.inet6.ip6.dad_count | awk '{print $NF}'`
	sleep 1

	# setting up interfaces
	for i in $iface; do
		eval prefix=\$prefix_$i
		if [ X"$prefix" = X"" ]; then
			continue
		fi
		for j in $prefix; do
		    	#XXX: the prefix command seems even problematic.
			#     we should reconsider this mechanism.
			#if [ -x $prefixconfig ]; then
			#	$prefixconfig $i $j::
			#else
				# NetBSD *requires* inet6
				laddr=`$ifconfig $i inet6 | grep 'inet6 fe80:' | head -1 | \
					awk '{print $2}'`
				hostid=`echo $laddr | sed -e 's/fe80:[0-9a-fA-F]+::/fe80::/' -e 's/fe80:://' -e 's/%.*//'`
				address=$j\:$hostid

				eval hostid_$i=$hostid
				eval address_$i=$address

				$ifconfig $i inet6 $address prefixlen 64 alias
			#fi

			# subnet-router anycast address (rfc2373)
			$ifconfig $i inet6 $j:: prefixlen 64 alias anycast
		done

		$ifconfig $i inet6
	done

	# again, wait for DAD's completion (for global addrs)
	sleep `$sysctl net.inet6.ip6.dad_count | awk '{print $NF}'`
	sleep 1

	# gifconfig
	for i in $gifs; do
		eval peers=\$gifconfig_$i
		if [ X"$peers" = X"" ]; then
			continue
		fi
		$gifconfig $i $peers
	done

	# route6d
	[ -x $route6d ] && $route6d $route6dflags

	# rtadvd
	# This should enabled with a great care.
	# You may want to fine-tune /usr/local/v6/etc/rtadvd.conf.
#	[ -x $rtadvd ] && $rtadvd $iface

	# mroute6d
	if [ X"${ip6mrouter}" = X"YES" -a -x $mroute6d ]; then
		$mroute6d $mroute6dflags
	fi
else
	# act as endhost - automatically configured

	# whether to use the privacy extension for autoconf.
        # the parameters should be set before accepting RAs.
	if [ X"${ip6tempaddr}" = X"YES" ]; then
	    $sysctl -w net.inet6.ip6.use_tempaddr=1
	    if [ X"${ip6temppltime}" != X ]; then
		$sysctl -w net.inet6.ip6.temppltime=${ip6temppltime}
	    fi
	    if [ X"${ip6tempvltime}" != X ]; then
		$sysctl -w net.inet6.ip6.tempvltime=${ip6tempvltime}
	    fi
	fi

	$sysctl -w net.inet6.ip6.forwarding=0
	$sysctl -w net.inet6.ip6.accept_rtadv=1

	$ifconfig $iface up

	# mobile ipv6 setup
	if [ X"${ipv6_mobile_enable}" = X"YES" ]; then
	    case ${ipv6_mobile_nodetype} in
	    [Mm][Oo][Bb][Ii][Ll][Ee]_[Nn][Oo][Dd][Ee])
		case ${ipv6_mobile_home_prefixes} in
		'')
		    ;;
		*)
		    for node_dir in ${ipv6_mobile_config_dir}/*
		    do
			if [ ! -e ${node_dir}/add ]; then
			    continue;
			fi
			$setkey -f ${node_dir}/add
			$setkey -f ${node_dir}/spdadd_mobile_node
		    done
		    for home_prefix in ${ipv6_mobile_home_prefixes}
		    do
			prefix=`expr "${home_prefix}" : "\(.*\)/.*"`
			prefixlen=`expr "${home_prefix}" : ".*/\(.*\)"`
			$mip6control -H ${prefix} -P ${prefixlen}
		    done
		    $mip6control -m
		    $rtsold -a -m
		    ;;
		esac
		;;
	    [Hh][Oo][Mm][Ee]_[Aa][Gg][Ee][Nn][Tt])
		case ${ipv6_mobile_home_link} in
		'')
		    ;;
		*)
		    for node_dir in ${ipv6_mobile_config_dir}/*
		    do
			if [ ! -e ${node_dir}/add ]; then
			    continue;
			fi
			$setkey -f ${node_dir}/add
			$setkey -f ${node_dir}/spdadd_home_agent
		    done
		    $mip6control -g
		    $had ${ipv6_mobile_home_link}
		    ;;
		esac
	    *)
		;;
	    esac
	fi

	# send router solicitation messages.
	if [ X"${ipv6rtsold}" = X"YES" ]; then
		$rtsold -a
	else
		if [ X"${iface}" != X ] ; then
			$rtsol $iface
		fi
	fi

	# install the "default interface" to kernel, which will be used 
	# as the default route when there's no router.
	[ -x $ndp ] && $ndp -I $defaultiface

	# wait for DAD's completion (for global addrs)
	sleep `$sysctl net.inet6.ip6.dad_count | awk '{print $NF}'`
	sleep 1
fi

echo -n "Starting standard IPv6 daemons:"

# inet46d configuration
#	KAME/FreeBSD3.x: AF_INET{,6} dual stack support with wildcard
#		bind on AF_INET6 socket. Also with IPsec support
if [ -x /usr/local/v6/sbin/inet46d ] && [ "X${inet6d_enable}" != X"NO" ]; then
	echo -n ' inet46d';	/usr/local/v6/sbin/inet46d $inet6d_flags
fi

# for each valid dir in $local_startup, search for init scripts matching *.sh
[ -d /usr/local/v6/etc/rc.d ] && for script in /usr/local/v6/etc/rc.d/*.sh; do
	[ -x ${script} ] && ${script} start
done

echo '.'
